{"ast":null,"code":"var _jsxFileName = \"/home/keshavaram/WebstormProjects/weather/frontend/src/App.js\";\nimport React from \"react\";\nimport './style.css';\nimport cloud from './cloud.png';\nimport rain from './rain.png';\nimport sunny from './sun.png';\nimport loc from './loc.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Weather extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentData: {\n        \"content\": \"none\"\n      },\n      forecastData: [],\n      image: null,\n      description: \"\",\n      temperature: \"\",\n      city: \"\",\n      realFeel: \"\"\n    };\n    this.fetchCurrentData = this.fetchCurrentData.bind(this);\n  }\n\n  async fetchCurrentData() {\n    const response = await fetch(\"http://localhost:8000/current\");\n    const jsonData = await response.json();\n    this.setState({\n      currentData: jsonData\n    });\n  }\n\n  async fetchForecastData() {\n    const response = await fetch(\"http://localhost:8000/forecast\");\n    const jsonData = await response.json();\n    this.setState({\n      forecastData: jsonData.list\n    });\n  }\n\n  componentDidMount() {\n    this.fetchCurrentData().then(() => {\n      console.log(\"Fetch completed\");\n      this.setState({\n        description: this.state.currentData.weather[0].description\n      });\n\n      switch (this.state.currentData.weather[0].main) {\n        case \"Clouds\":\n        case \"Mist\":\n          this.setState({\n            image: cloud\n          });\n          break;\n\n        case \"Rain\":\n        case \"Drizzle\":\n          this.setState({\n            image: rain\n          });\n          break;\n\n        case \"Clear\":\n          this.setState({\n            image: sunny\n          });\n          break;\n      }\n\n      this.setState({\n        temperature: this.state.currentData.main.temp.toString()\n      });\n      this.setState({\n        realFeel: this.state.currentData.main.feels_like\n      });\n    });\n    this.fetchForecastData().then(() => {\n      console.log(\"fetch completed\");\n      this.setState({\n        city: \"London\"\n      });\n      console.log(this.state.city);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"weatherCard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"location\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"forecastImage\",\n          alt: \"...\",\n          src: loc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: \"city\",\n          children: [\"Weather at \", this.state.city]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"current\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            id: \"mainImage\",\n            alt: \"...\",\n            src: this.state.image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [this.state.temperature, /*#__PURE__*/_jsxDEV(\"sup\", {\n              children: \"o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 53\n            }, this), \"C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: this.state.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"RealFeel \", this.state.realFeel, /*#__PURE__*/_jsxDEV(\"sup\", {\n              children: \"o\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 59\n            }, this), \"C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"forecast\",\n        children: this.state.forecastData.map(each => {\n          if (each.dt_txt.split(\" \")[0].split(\"-\")[2] === new Date().toDateString().split(\" \")[2]) {\n            let forecastImage = null;\n\n            switch (each.weather[0].main) {\n              case \"Clouds\":\n              case \"Mist\":\n                forecastImage = cloud;\n                break;\n\n              case \"Rain\":\n              case \"Drizzle\":\n                forecastImage = rain;\n                break;\n\n              case \"Clear\":\n                forecastImage = sunny;\n                break;\n            }\n\n            return /*#__PURE__*/_jsxDEV(PredictedWeather, {\n              image: forecastImage,\n              time: each.dt_txt.split(\" \")[1],\n              temp: each.main.temp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 40\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst PredictedWeather = _ref => {\n  let {\n    image,\n    time,\n    temp\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"forecastCard\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"...\",\n      className: \"forecastImage\",\n      src: image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [temp, /*#__PURE__*/_jsxDEV(\"sup\", {\n        children: \"o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 23\n      }, this), \"C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n      children: time\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n\n_c = PredictedWeather;\nexport default Weather;\n\nvar _c;\n\n$RefreshReg$(_c, \"PredictedWeather\");","map":{"version":3,"sources":["/home/keshavaram/WebstormProjects/weather/frontend/src/App.js"],"names":["React","cloud","rain","sunny","loc","Weather","Component","constructor","props","state","currentData","forecastData","image","description","temperature","city","realFeel","fetchCurrentData","bind","response","fetch","jsonData","json","setState","fetchForecastData","list","componentDidMount","then","console","log","weather","main","temp","toString","feels_like","render","map","each","dt_txt","split","Date","toDateString","forecastImage","PredictedWeather","time"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,aAAP;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,GAAP,MAAgB,WAAhB;;;AAGA,MAAMC,OAAN,SAAsBL,KAAK,CAACM,SAA5B,CACA;AACIC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAG;AAAC,mBAAY;AAAb,OADL;AAETC,MAAAA,YAAY,EAAG,EAFN;AAGTC,MAAAA,KAAK,EAAG,IAHC;AAITC,MAAAA,WAAW,EAAG,EAJL;AAKTC,MAAAA,WAAW,EAAG,EALL;AAMTC,MAAAA,IAAI,EAAG,EANE;AAOTC,MAAAA,QAAQ,EAAG;AAPF,KAAb;AASA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACH;;AAEqB,QAAhBD,gBAAgB,GACtB;AACI,UAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAAD,CAA5B;AACA,UAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AACA,SAAKC,QAAL,CAAc;AAACb,MAAAA,WAAW,EAAGW;AAAf,KAAd;AACH;;AAEsB,QAAjBG,iBAAiB,GACvB;AACI,UAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,CAA5B;AACA,UAAMC,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AACA,SAAKC,QAAL,CAAc;AAACZ,MAAAA,YAAY,EAAGU,QAAQ,CAACI;AAAzB,KAAd;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKT,gBAAL,GACKU,IADL,CACU,MAAM;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,WAAKN,QAAL,CAAc;AAACV,QAAAA,WAAW,EAAG,KAAKJ,KAAL,CAAWC,WAAX,CAAuBoB,OAAvB,CAA+B,CAA/B,EAAkCjB;AAAjD,OAAd;;AACA,cAAQ,KAAKJ,KAAL,CAAWC,WAAX,CAAuBoB,OAAvB,CAA+B,CAA/B,EAAkCC,IAA1C;AAEI,aAAK,QAAL;AAAe,aAAK,MAAL;AAAc,eAAKR,QAAL,CAAc;AAACX,YAAAA,KAAK,EAAGX;AAAT,WAAd;AAA+B;;AAC5D,aAAK,MAAL;AAAa,aAAK,SAAL;AAAgB,eAAKsB,QAAL,CAAc;AAACX,YAAAA,KAAK,EAAGV;AAAT,WAAd;AAA8B;;AAC3D,aAAK,OAAL;AAAe,eAAKqB,QAAL,CAAc;AAACX,YAAAA,KAAK,EAAGT;AAAT,WAAd;AAA+B;AAJlD;;AAMA,WAAKoB,QAAL,CAAc;AAACT,QAAAA,WAAW,EAAG,KAAKL,KAAL,CAAWC,WAAX,CAAuBqB,IAAvB,CAA4BC,IAA5B,CAAiCC,QAAjC;AAAf,OAAd;AACA,WAAKV,QAAL,CAAc;AAACP,QAAAA,QAAQ,EAAG,KAAKP,KAAL,CAAWC,WAAX,CAAuBqB,IAAvB,CAA4BG;AAAxC,OAAd;AACH,KAZL;AAcA,SAAKV,iBAAL,GACKG,IADL,CACU,MACN;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,WAAKN,QAAL,CAAc;AAACR,QAAAA,IAAI,EAAG;AAAR,OAAd;AACAa,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKpB,KAAL,CAAWM,IAAvB;AACH,KANL;AAOH;;AAEDoB,EAAAA,MAAM,GACN;AACI,wBACI;AAAS,MAAA,EAAE,EAAE,aAAb;AAAA,8BACI;AAAK,QAAA,EAAE,EAAE,UAAT;AAAA,gCACI;AAAK,UAAA,SAAS,EAAE,eAAhB;AAAiC,UAAA,GAAG,EAAE,KAAtC;AAA6C,UAAA,GAAG,EAAE/B;AAAlD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAI,UAAA,EAAE,EAAE,MAAR;AAAA,oCAA4B,KAAKK,KAAL,CAAWM,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAS,QAAA,EAAE,EAAE,SAAb;AAAA,gCACI;AAAA,kCACI;AAAK,YAAA,EAAE,EAAE,WAAT;AAAsB,YAAA,GAAG,EAAE,KAA3B;AAAkC,YAAA,GAAG,EAAE,KAAKN,KAAL,CAAWG;AAAlD;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,uBAAK,KAAKH,KAAL,CAAWK,WAAhB,eAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAA,sBAAK,KAAKL,KAAL,CAAWI;AAAhB;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMI;AAAA,iCACI;AAAA,oCAAc,KAAKJ,KAAL,CAAWO,QAAzB,eAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAgBI;AAAS,QAAA,EAAE,EAAE,UAAb;AAAA,kBAEQ,KAAKP,KAAL,CAAWE,YAAX,CAAwByB,GAAxB,CAA6BC,IAAD,IAC5B;AACI,cAAIA,IAAI,CAACC,MAAL,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,EAA0BA,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,MAA4C,IAAIC,IAAJ,GAAWC,YAAX,GAA0BF,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAhD,EACA;AACI,gBAAIG,aAAa,GAAE,IAAnB;;AACA,oBAAOL,IAAI,CAACP,OAAL,CAAa,CAAb,EAAgBC,IAAvB;AAEI,mBAAK,QAAL;AAAe,mBAAK,MAAL;AAAcW,gBAAAA,aAAa,GAAGzC,KAAhB;AAAsB;;AACnD,mBAAK,MAAL;AAAa,mBAAK,SAAL;AAAgByC,gBAAAA,aAAa,GAAGxC,IAAhB;AAAqB;;AAClD,mBAAK,OAAL;AAAewC,gBAAAA,aAAa,GAAGvC,KAAhB;AAAsB;AAJzC;;AAMA,gCAAO,QAAC,gBAAD;AAAkB,cAAA,KAAK,EAAEuC,aAAzB;AAAwC,cAAA,IAAI,EAAEL,IAAI,CAACC,MAAL,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAA9C;AAAyE,cAAA,IAAI,EAAEF,IAAI,CAACN,IAAL,CAAUC;AAAzF;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH;AACJ,SAbD;AAFR;AAAA;AAAA;AAAA;AAAA,cAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAqCH;;AA5FL;;AA+FA,MAAMW,gBAAgB,GAAG,QACzB;AAAA,MAD0B;AAAC/B,IAAAA,KAAD;AAAOgC,IAAAA,IAAP;AAAYZ,IAAAA;AAAZ,GAC1B;AACI,sBACI;AAAS,IAAA,EAAE,EAAE,cAAb;AAAA,4BACI;AAAK,MAAA,GAAG,EAAE,KAAV;AAAiB,MAAA,SAAS,EAAE,eAA5B;AAA6C,MAAA,GAAG,EAAEpB;AAAlD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,iBAAKoB,IAAL,eAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,gBAAKY;AAAL;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CATD;;KAAMD,gB;AAWN,eAAetC,OAAf","sourcesContent":["import React from \"react\";\nimport './style.css'\nimport cloud from './cloud.png'\nimport rain from './rain.png'\nimport sunny from './sun.png'\nimport loc from './loc.png'\n\n\nclass Weather extends React.Component\n{\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentData : {\"content\" : \"none\"},\n            forecastData : [],\n            image : null,\n            description : \"\",\n            temperature : \"\",\n            city : \"\",\n            realFeel : \"\"\n        }\n        this.fetchCurrentData = this.fetchCurrentData.bind(this);\n    }\n\n    async fetchCurrentData()\n    {\n        const response = await fetch(\"http://localhost:8000/current\");\n        const jsonData = await response.json();\n        this.setState({currentData : jsonData});\n    }\n\n    async fetchForecastData()\n    {\n        const response = await fetch(\"http://localhost:8000/forecast\");\n        const jsonData = await response.json();\n        this.setState({forecastData : jsonData.list});\n    }\n\n    componentDidMount() {\n        this.fetchCurrentData()\n            .then(() => {\n                console.log(\"Fetch completed\");\n                this.setState({description : this.state.currentData.weather[0].description});\n                switch (this.state.currentData.weather[0].main)\n                {\n                    case \"Clouds\": case \"Mist\" : this.setState({image : cloud});break;\n                    case \"Rain\": case \"Drizzle\": this.setState({image : rain});break;\n                    case \"Clear\" : this.setState({image : sunny});break;\n                }\n                this.setState({temperature : this.state.currentData.main.temp.toString()})\n                this.setState({realFeel : this.state.currentData.main.feels_like})\n            });\n\n        this.fetchForecastData()\n            .then(() =>\n            {\n                console.log(\"fetch completed\")\n                this.setState({city : \"London\"});\n                console.log(this.state.city);\n            })\n    }\n\n    render()\n    {\n        return(\n            <section id={\"weatherCard\"}>\n                <div id={\"location\"}>\n                    <img className={\"forecastImage\"} alt={\"...\"} src={loc}/>\n                    <h3 id={\"city\"}>Weather at {this.state.city}</h3>\n                </div>\n                <section id={\"current\"}>\n                    <div>\n                        <img id={\"mainImage\"} alt={\"...\"} src={this.state.image}/>\n                        <h1>{this.state.temperature}<sup>o</sup>C</h1>\n                        <h2>{this.state.description}</h2>\n                    </div>\n                    <div>\n                        <h1>RealFeel {this.state.realFeel}<sup>o</sup>C</h1>\n                        \n                    </div>\n                </section>\n                <section id={\"forecast\"}>\n                    {\n                        this.state.forecastData.map((each) =>\n                        {\n                            if (each.dt_txt.split(\" \")[0].split(\"-\")[2] === new Date().toDateString().split(\" \")[2])\n                            {\n                                let forecastImage =null;\n                                switch(each.weather[0].main)\n                                {\n                                    case \"Clouds\": case \"Mist\" : forecastImage = cloud;break;\n                                    case \"Rain\": case \"Drizzle\": forecastImage = rain;break;\n                                    case \"Clear\" : forecastImage = sunny;break;\n                                }\n                                return(<PredictedWeather image={forecastImage} time={each.dt_txt.split(\" \")[1]} temp={each.main.temp}/>)\n                            }\n                        })\n                    }\n                </section>\n            </section>\n        )\n    }\n}\n\nconst PredictedWeather = ({image,time,temp}) =>\n{\n    return(\n        <section id={\"forecastCard\"}>\n            <img alt={\"...\"} className={\"forecastImage\"} src={image}/>\n            <h4>{temp}<sup>o</sup>C</h4>\n            <h6>{time}</h6>\n        </section>\n    )\n}\n\nexport default Weather\n"]},"metadata":{},"sourceType":"module"}