[{"/home/keshavaram/WebstormProjects/weather/frontend/src/index.js":"1","/home/keshavaram/WebstormProjects/weather/frontend/src/App.js":"2"},{"size":965,"mtime":1641813606940,"results":"3","hashOfConfig":"4"},{"size":7938,"mtime":1641813513516,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"g9luxt",{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/home/keshavaram/WebstormProjects/weather/frontend/src/index.js",[],"/home/keshavaram/WebstormProjects/weather/frontend/src/App.js",["11","12"],"import React from \"react\";\nimport './style.css'\nimport cloud from './cloud.png'\nimport rain from './rain.png'\nimport sunny from './sun.png'\nimport loc from './loc.png'\nimport temp from './temp.png'\nimport realFeel from './realFeel.svg'\nimport pressure from './pressure.png'\nimport wind from './wind.png'\nimport humidity from './humidity.png'\nimport fog from './fog.png'\nimport $ from 'jquery'\n\nlet day;\n\nclass Weather extends React.Component\n{\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentData : {\"content\" : \"none\"},\n            forecastData : [],\n            image : null,\n            description : \"\",\n            temperature : \"\",\n            city : \"\",\n            realFeel : \"\",\n            max : \"\",\n            min : \"\",\n            humidity : \"\",\n            pressure : \"\",\n            wind : \"\",\n            today : \"\",\n            days : [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n        }\n        this.fetchCurrentData = this.fetchCurrentData.bind(this);\n        this.daySelect = this.daySelect.bind(this);\n        this.runOnce();\n    }\n\n    async runOnce()\n    {\n        let now = new Date().getDay();\n        this.setState({today : now})\n        const response = await fetch(\"http://localhost:8000/forecast/:\" + this.state.days[now]);\n        $(\"#daySelect\").val(this.state.days[now])\n        const jsonData = await response.json();\n        this.setState({forecastData : jsonData});\n    }\n\n    async fetchCurrentData()\n    {\n        const response = await fetch(\"http://localhost:8000/current\");\n        const jsonData = await response.json();\n        this.setState({currentData : jsonData});\n    }\n\n    async fetchForecastData()\n    {\n        let now = new Date().getDay();\n        this.setState({today : now})\n        const response = await fetch(\"http://localhost:8000/forecast/:\" + this.props.day);\n        $(\"#daySelect\").val(this.props.day)\n        const jsonData = await response.json();\n        this.setState({forecastData : jsonData});\n    }\n\n    componentDidMount() {\n        this.fetchCurrentData()\n            .then(() => {\n                this.setState({description : this.state.currentData.weather[0].description});\n                switch (this.state.currentData.weather[0].main)\n                {\n                    case \"Clouds\": case \"Mist\" : this.setState({image : cloud});break;\n                    case \"Rain\": case \"Drizzle\": this.setState({image : rain});break;\n                    case \"Clear\" : this.setState({image : sunny});break;\n                    case \"Haze\" : case \"Foggy\":case \"Fog\": this.setState({image : fog});break;\n                }\n                this.setState({temperature : this.state.currentData.main.temp.toString()});\n                this.setState({realFeel : this.state.currentData.main.feels_like});\n                this.setState({max : this.state.currentData.main.temp_max});\n                this.setState({min : this.state.currentData.main.temp_min});\n                this.setState({humidity : this.state.currentData.main.humidity});\n                this.setState({pressure : this.state.currentData.main.pressure});\n                this.setState({wind : this.state.currentData.wind.speed});\n                this.setState({city : this.state.currentData.name});\n            });\n\n        this.fetchForecastData();\n    }\n\n    async daySelect(event)\n    {\n        window.location.href = '/' + event.target.value;\n        const response = await fetch(\"http://localhost:8000/forecast/:\" + event.target.value);\n        const jsonData = await response.json();\n        this.setState({forecastData : jsonData})\n        day = event.target.value;\n    }\n\n    render()\n    {\n        return(\n            <section id={\"weatherCard\"}>\n                <div id={\"location\"} style={{\"display\":\"flex\",\"flexDirection\" : \"row\"}}>\n                    <img className={\"forecastImage\"} alt={\"...\"} src={loc}/>\n                    <h3 id={\"city\"}>Now in {this.state.city}</h3>\n                    <select id={\"daySelect\"} onChange={this.daySelect}>\n                        <option  value={\"Monday\"}>Monday</option>\n                        <option value={\"Tuesday\"}>Tuesday</option>\n                        <option value={\"Wednesday\"}>Wednesday</option>\n                        <option value={\"Thursday\"}>Thursday</option>\n                        <option value={\"Friday\"}>Friday</option>\n                        <option value={\"Saturday\"}>Saturday</option>\n                        <option value={\"Sunday\"}>Sunday</option>\n                    </select>\n                </div>\n                <section id={\"current\"}>\n                    <div>\n                        <img id={\"mainImage\"} alt={\"...\"} src={this.state.image}/>\n                        <h1>{this.state.temperature}<sup>o</sup>C</h1>\n                        <h2>{this.state.description}</h2>\n                    </div>\n                    <div>\n                        <div style={{\"display\":\"flex\",\"flexDirection\" : \"row\"}}>\n                            <img className={\"forecastImage\"} alt={\"...\"} src={realFeel}/>\n                            <h1> RealFeel {this.state.realFeel}<sup>o</sup>C</h1>\n                        </div>\n                        <div style={{\"display\":\"flex\",\"flexDirection\" : \"row\"}}>\n                            <img className={\"forecastImage\"} alt={\"...\"} src={temp}/>\n                            <h1>{this.state.max}<sup>o</sup>c / {this.state.min}<sup>o</sup>c</h1>\n                        </div>\n                        <div style={{\"display\":\"flex\",\"flexDirection\" : \"row\",\"fontSize\":\"20px\"}}>\n                            <img className={\"forecastImage\"} alt={\"...\"} src={wind}/>\n                            <h1 style={{\"paddingTop\" : \"8px\"}}>{this.state.wind} m/s</h1>\n                        </div>\n                    </div>\n                    <div>\n                        <div style={{\"display\":\"flex\",\"flexDirection\" : \"row\",\"fontSize\":\"20px\"}}>\n                            <img className={\"forecastImage\"} alt={\"...\"} src={pressure}/>\n                            <h1>{this.state.pressure} Pa</h1>\n                        </div>\n                        <div style={{\"display\":\"flex\",\"flexDirection\" : \"row\",\"fontSize\":\"20px\"}}>\n                            <img className={\"forecastImage\"} alt={\"...\"} src={humidity}/>\n                            <h1>{this.state.humidity} Kg/m<sup>3</sup></h1>\n                        </div>\n                    </div>\n                </section>\n                <section style={{\"textAlign\" : \"center\",\"paddingTop\" : \"15px\"}}>\n                    <h1>{this.props.day||this.state.days[new Date().getDay()]}'s Forecast</h1>\n                </section>\n                <section id={\"forecast\"}>\n                    {\n                        this.state.forecastData.map((each) =>\n                        {\n                            let forecastImage =null;\n                            switch(each.weather[0].main)\n                            {\n                                case \"Clouds\": case \"Mist\" : forecastImage = cloud;break;\n                                case \"Rain\": case \"Drizzle\": forecastImage = rain;break;\n                                case \"Clear\" : forecastImage = sunny;break;\n                                case \"Haze\" : case \"Foggy\":case \"Fog\": forecastImage = fog;break;\n                            }\n                            return(<PredictedWeather image={forecastImage} time={each.dt_txt.split(\" \")[1]} temp={each.main.temp} key={each.dt_txt.split(\" \")[1]}/>)\n                        })\n                    }\n                </section>\n            </section>\n        )\n    }\n}\n\nconst PredictedWeather = ({image,time,temp}) =>\n{\n    return(\n        <section id={\"forecastCard\"}>\n            <img alt={\"...\"} className={\"forecastImage\"} src={image}/>\n            <h4>{temp}<sup>o</sup>C</h4>\n            <h6>{time}</h6>\n        </section>\n    )\n}\n\nexport {Weather,day}\n",{"ruleId":"13","severity":1,"message":"14","line":73,"column":17,"nodeType":"15","messageId":"16","endLine":79,"endColumn":18},{"ruleId":"13","severity":1,"message":"14","line":158,"column":29,"nodeType":"15","messageId":"16","endLine":164,"endColumn":30},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase"]